var search_data = {"index":{"searchIndex":["ankirecord","ankipackage","card","cardtemplate","checksumhelper","collection","deck","deckoptionsgroup","note","notefield","notetype","sharedconstantshelper","timehelper","allowed_card_template_answer_format_field_names()","allowed_card_template_question_format_field_names()","answer_format=()","checksum()","closed?()","execute()","field_names_in_order()","find_card_template_by()","find_deck_by()","find_note_type_by()","method_missing()","milliseconds_since_epoch()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_card_template()","new_note_field()","open()","open?()","question_format=()","respond_to_missing?()","save()","save()","seconds_since_epoch()","snake_case_field_names()","snake_case_sort_field_name()","sort_field_name()","zip()","changelog","code_of_conduct","license","readme"],"longSearchIndex":["ankirecord","ankirecord::ankipackage","ankirecord::card","ankirecord::cardtemplate","ankirecord::checksumhelper","ankirecord::collection","ankirecord::deck","ankirecord::deckoptionsgroup","ankirecord::note","ankirecord::notefield","ankirecord::notetype","ankirecord::sharedconstantshelper","ankirecord::timehelper","ankirecord::notetype#allowed_card_template_answer_format_field_names()","ankirecord::notetype#allowed_card_template_question_format_field_names()","ankirecord::cardtemplate#answer_format=()","ankirecord::checksumhelper#checksum()","ankirecord::ankipackage#closed?()","ankirecord::ankipackage#execute()","ankirecord::notetype#field_names_in_order()","ankirecord::notetype#find_card_template_by()","ankirecord::collection#find_deck_by()","ankirecord::collection#find_note_type_by()","ankirecord::note#method_missing()","ankirecord::timehelper#milliseconds_since_epoch()","ankirecord::ankipackage::new()","ankirecord::card::new()","ankirecord::cardtemplate::new()","ankirecord::collection::new()","ankirecord::deck::new()","ankirecord::deckoptionsgroup::new()","ankirecord::note::new()","ankirecord::notefield::new()","ankirecord::notetype::new()","ankirecord::notetype#new_card_template()","ankirecord::notetype#new_note_field()","ankirecord::ankipackage::open()","ankirecord::ankipackage#open?()","ankirecord::cardtemplate#question_format=()","ankirecord::note#respond_to_missing?()","ankirecord::card#save()","ankirecord::note#save()","ankirecord::timehelper#seconds_since_epoch()","ankirecord::notetype#snake_case_field_names()","ankirecord::notetype#snake_case_sort_field_name()","ankirecord::notetype#sort_field_name()","ankirecord::ankipackage#zip()","","","",""],"info":[["AnkiRecord","","AnkiRecord.html","","<p>This module is the namespace for all AnkiRecord classes:\n<p>AnkiPackage\n<p>Card\n"],["AnkiRecord::AnkiPackage","","AnkiRecord/AnkiPackage.html","","<p>Represents an Anki SQLite3 package/database\n<p>Use ::new to create a new object or ::open to create an object …\n"],["AnkiRecord::Card","","AnkiRecord/Card.html","","<p>Card represents an Anki card.\n"],["AnkiRecord::CardTemplate","","AnkiRecord/CardTemplate.html","","<p>CardTemplate represents a card template of an Anki note type\n"],["AnkiRecord::ChecksumHelper","","AnkiRecord/ChecksumHelper.html","","<p>A module for the method that calculates the checksum value of notes.\n<p>This checksum is used by Anki to …\n"],["AnkiRecord::Collection","","AnkiRecord/Collection.html","","<p>Collection represents the single record in the Anki database ‘col` table\n"],["AnkiRecord::Deck","","AnkiRecord/Deck.html","","<p>Deck represents an Anki deck\n"],["AnkiRecord::DeckOptionsGroup","","AnkiRecord/DeckOptionsGroup.html","","<p>Represents the set of options that can be applied to a deck\n"],["AnkiRecord::Note","","AnkiRecord/Note.html","","<p>Note represents an Anki note\n"],["AnkiRecord::NoteField","","AnkiRecord/NoteField.html","","<p>NoteField represents a field of an Anki note type\n"],["AnkiRecord::NoteType","","AnkiRecord/NoteType.html","","<p>NoteType represents an Anki note type (also called a model)\n"],["AnkiRecord::SharedConstantsHelper","","AnkiRecord/SharedConstantsHelper.html","","<p>Helper module to hold the constants used by multiple classes\n"],["AnkiRecord::TimeHelper","","AnkiRecord/TimeHelper.html","","<p>Helper module to calculate integer time values since the 1970 epoch\n<p>Specifically, the time that has passed …\n"],["allowed_card_template_answer_format_field_names","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-allowed_card_template_answer_format_field_names","()","<p>The allowed field_name values in {{field_name}} of the note type’s card templates’ answer format …\n"],["allowed_card_template_question_format_field_names","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-allowed_card_template_question_format_field_names","()","<p>The allowed field_name values in {{field_name}} of the note type’s card templates’ question format …\n"],["answer_format=","AnkiRecord::CardTemplate","AnkiRecord/CardTemplate.html#method-i-answer_format-3D","(format)","<p>Sets the answer format and raises an ArgumentError if the specified format uses invalid fields\n"],["checksum","AnkiRecord::ChecksumHelper","AnkiRecord/ChecksumHelper.html#method-i-checksum","(sfld)","<p>Compute the integer representation of the first 8 characters of the digest (calculated using the SHA-1 …\n"],["closed?","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-i-closed-3F","()","<p>Returns true if the database is closed\n"],["execute","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-i-execute","(raw_sql_string)","<p>Executes a raw SQL statement against the *.anki21 database\n<p>Do not use this to execute data definition …\n"],["field_names_in_order","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-field_names_in_order","()","<p>The field names of the note type ordered by their ordinal values\n"],["find_card_template_by","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-find_card_template_by","(name:)","<p>Find one of the note type’s card templates by name\n"],["find_deck_by","AnkiRecord::Collection","AnkiRecord/Collection.html#method-i-find_deck_by","(name: nil)","<p>Find one of the collection’s decks by name\n"],["find_note_type_by","AnkiRecord::Collection","AnkiRecord/Collection.html#method-i-find_note_type_by","(name: nil)","<p>Find one of the collection’s note types by name\n"],["method_missing","AnkiRecord::Note","AnkiRecord/Note.html#method-i-method_missing","(method_name, field_content = nil)","<p>This overrides BasicObject#method_missing and has the effect of creating “ghost methods”\n<p>Specifically …\n"],["milliseconds_since_epoch","AnkiRecord::TimeHelper","AnkiRecord/TimeHelper.html#method-i-milliseconds_since_epoch","()","<p>Return the number of milliseconds since the 1970 epoch\n"],["new","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-c-new","(name:, directory: Dir.pwd, &closure)","<p>Creates a new object which represents an Anki SQLite3 database\n<p>This method takes an optional block argument. …\n"],["new","AnkiRecord::Card","AnkiRecord/Card.html#method-c-new","(note:, card_template:)","<p>rubocop:disable Metrics/MethodLength rubocop:disable Metrics/AbcSize\n"],["new","AnkiRecord::CardTemplate","AnkiRecord/CardTemplate.html#method-c-new","(note_type:, name: nil, args: nil)","<p>Instantiates a new card template called <code>name</code> for the given note type\n"],["new","AnkiRecord::Collection","AnkiRecord/Collection.html#method-c-new","(anki_package:)","<p>Instantiates the collection object for the <code>anki_package</code>\n<p>The collection object represents the single record …\n"],["new","AnkiRecord::Deck","AnkiRecord/Deck.html#method-c-new","(collection:, name: nil, args: nil)","<p>Instantiates a new Deck object\n"],["new","AnkiRecord::DeckOptionsGroup","AnkiRecord/DeckOptionsGroup.html#method-c-new","(collection:, name: nil, args: nil)","<p>Instantiates a new deck options group called <code>name</code> with defaults\n"],["new","AnkiRecord::Note","AnkiRecord/Note.html#method-c-new","(deck:, note_type:)","<p>Instantiate a new note for a deck and note type or TODO: instantiate a new object from an already existing …\n"],["new","AnkiRecord::NoteField","AnkiRecord/NoteField.html#method-c-new","(note_type:, name: nil, args: nil)","<p>Instantiates a new field for the given note type\n"],["new","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-c-new","(collection:, name: nil, cloze: false, args: nil)","<p>Instantiates a new note type\n"],["new_card_template","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-new_card_template","(name:)","<p>Create a new card template and adds it to this note type’s templates\n<p>The card template is an instance …\n"],["new_note_field","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-new_note_field","(name:)","<p>Creates a new field and adds it to this note type’s fields\n<p>The field is an instance of AnkiRecord::NoteField …\n"],["open","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-c-open","(path:, target_directory: nil, &closure)","<p>Creates a new object which represents the Anki SQLite3 database file at <code>path</code>\n<p>Development has focused on …\n"],["open?","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-i-open-3F","()","<p>Returns true if the database is open\n"],["question_format=","AnkiRecord::CardTemplate","AnkiRecord/CardTemplate.html#method-i-question_format-3D","(format)","<p>Sets the question format and raises an ArgumentError if the specified format uses invalid fields\n"],["respond_to_missing?","AnkiRecord::Note","AnkiRecord/Note.html#method-i-respond_to_missing-3F","(method_name, *)","<p>This allows #respond_to? to be accurate for the ghost methods created by #method_missing\n"],["save","AnkiRecord::Card","AnkiRecord/Card.html#method-i-save","()","<p>Saves the card to the collection.anki21 database\n"],["save","AnkiRecord::Note","AnkiRecord/Note.html#method-i-save","()","<p>Save the note to the collection.anki21 database\n"],["seconds_since_epoch","AnkiRecord::TimeHelper","AnkiRecord/TimeHelper.html#method-i-seconds_since_epoch","()","<p>Return the number of seconds since the 1970 epoch\n"],["snake_case_field_names","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-snake_case_field_names","()","<p>The allowed field names of the note in snake_case\n<p>TODO: make this more robust… what happens when the …\n"],["snake_case_sort_field_name","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-snake_case_sort_field_name","()","<p>The name of the sort field in snake_case\n"],["sort_field_name","AnkiRecord::NoteType","AnkiRecord/NoteType.html#method-i-sort_field_name","()","<p>The name of the field used to sort notes of the note type in the Anki browser\n"],["zip","AnkiRecord::AnkiPackage","AnkiRecord/AnkiPackage.html#method-i-zip","()","<p>Zips the temporary files into the *.apkg package and deletes the temporary files.\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>[Development started] - 02-02-2023\n<p>[Unreleased/0.1.0] - 02-22-2023\n<p>The gem can be used to create an *.apkg …\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>We as members, contributors, and leaders pledge to make …\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2023 Kyle Rego\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","README_md.html","","<p>AnkiRecord\n<p>AnkiRecord is a Ruby gem which provides a programmatic interface to creating and updating  …\n"]]}}