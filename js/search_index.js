var search_data = {"index":{"searchIndex":["ankirecord","ankipackage","card","cardattributes","cardtemplate","cardtemplateattributes","checksumhelper","collection","collectionattributes","deck","deckattributes","deckoptionsgroup","deckoptionsgroupattributes","note","noteattributes","notefield","notefieldattributes","notetype","notetypeattributes","timehelper","allowed_card_template_answer_format_field_names()","allowed_card_template_question_format_field_names()","answer_format=()","checksum()","deck()","deck=()","field_names_in_order()","find_card_template_by()","find_deck_by()","find_deck_options_group_by()","find_note_by()","find_note_type_by()","method_missing()","milliseconds_since_epoch()","new()","new()","new()","new()","new()","new()","new()","open()","prepare()","question_format=()","respond_to_missing?()","save()","save()","save()","seconds_since_epoch()","sort_field_name()","temporarily_unzip_source_apkg()","zip()","changelog","code_of_conduct","license","readme"],"longSearchIndex":["ankirecord","ankirecord::ankipackage","ankirecord::card","ankirecord::cardattributes","ankirecord::cardtemplate","ankirecord::cardtemplateattributes","ankirecord::checksumhelper","ankirecord::collection","ankirecord::collectionattributes","ankirecord::deck","ankirecord::deckattributes","ankirecord::deckoptionsgroup","ankirecord::deckoptionsgroupattributes","ankirecord::note","ankirecord::noteattributes","ankirecord::notefield","ankirecord::notefieldattributes","ankirecord::notetype","ankirecord::notetypeattributes","ankirecord::timehelper","ankirecord::notetype#allowed_card_template_answer_format_field_names()","ankirecord::notetype#allowed_card_template_question_format_field_names()","ankirecord::cardtemplateattributes#answer_format=()","ankirecord::checksumhelper#checksum()","ankirecord::notetypeattributes#deck()","ankirecord::notetypeattributes#deck=()","ankirecord::notetype#field_names_in_order()","ankirecord::notetype#find_card_template_by()","ankirecord::collection#find_deck_by()","ankirecord::collection#find_deck_options_group_by()","ankirecord::collection#find_note_by()","ankirecord::collection#find_note_type_by()","ankirecord::note#method_missing()","ankirecord::timehelper#milliseconds_since_epoch()","ankirecord::ankipackage::new()","ankirecord::cardtemplate::new()","ankirecord::deck::new()","ankirecord::deckoptionsgroup::new()","ankirecord::note::new()","ankirecord::notefield::new()","ankirecord::notetype::new()","ankirecord::ankipackage::open()","ankirecord::ankipackage#prepare()","ankirecord::cardtemplateattributes#question_format=()","ankirecord::note#respond_to_missing?()","ankirecord::deck#save()","ankirecord::note#save()","ankirecord::notetype#save()","ankirecord::timehelper#seconds_since_epoch()","ankirecord::notetype#sort_field_name()","ankirecord::ankipackage#temporarily_unzip_source_apkg()","ankirecord::ankipackage#zip()","","","",""],"info":[["AnkiRecord","","classes/AnkiRecord.html","","<p>rubocop:disable Metrics/ClassLength\n<p>rubocop:disable Metrics/ClassLength\n"],["AnkiRecord::AnkiPackage","","classes/AnkiRecord/AnkiPackage.html","","<p>AnkiPackage represents an Anki package.\n<p>Here, Anki package refers to the zip file that Anki can export …\n"],["AnkiRecord::Card","","classes/AnkiRecord/Card.html","","<p>Card represents an Anki card.\n"],["AnkiRecord::CardAttributes","","classes/AnkiRecord/CardAttributes.html","","<p>Module with the Card class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::CardTemplate","","classes/AnkiRecord/CardTemplate.html","","<p>CardTemplate represents a card template of an Anki note type.\n"],["AnkiRecord::CardTemplateAttributes","","classes/AnkiRecord/CardTemplateAttributes.html","","<p>Module with the CardTemplate class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::ChecksumHelper","","classes/AnkiRecord/ChecksumHelper.html","","<p>A module for the method that calculates the checksum value of notes.\n<p>This checksum may be used by Anki …\n"],["AnkiRecord::Collection","","classes/AnkiRecord/Collection.html","","<p>Collection represents the single record in the Anki collection.anki21 database’s ‘col` table. The …\n"],["AnkiRecord::CollectionAttributes","","classes/AnkiRecord/CollectionAttributes.html","","<p>Module with the Collection class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::Deck","","classes/AnkiRecord/Deck.html","","<p>Deck represents an Anki deck. In the collection.anki21 database, the deck is a JSON object which is part …\n"],["AnkiRecord::DeckAttributes","","classes/AnkiRecord/DeckAttributes.html","","<p>Module with the Deck class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::DeckOptionsGroup","","classes/AnkiRecord/DeckOptionsGroup.html","","<p>DeckOptionsGroup represents a set of options that can be applied to an Anki deck.\n"],["AnkiRecord::DeckOptionsGroupAttributes","","classes/AnkiRecord/DeckOptionsGroupAttributes.html","","<p>Module with the Card class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::Note","","classes/AnkiRecord/Note.html","","<p>Represents an Anki note. The note object corresponds to a record in the ‘notes` table in the collection.anki21 …\n"],["AnkiRecord::NoteAttributes","","classes/AnkiRecord/NoteAttributes.html","","<p>Module with the Note class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::NoteField","","classes/AnkiRecord/NoteField.html","","<p>NoteField represents a field of an Anki note type.\n"],["AnkiRecord::NoteFieldAttributes","","classes/AnkiRecord/NoteFieldAttributes.html","","<p>Module with the NoteField class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::NoteType","","classes/AnkiRecord/NoteType.html","","<p>NoteType represents an Anki note type (also called a model).\n<p>The attributes are documented in the NoteTypeAttributes …\n"],["AnkiRecord::NoteTypeAttributes","","classes/AnkiRecord/NoteTypeAttributes.html","","<p>Module with the NoteType class’s attribute readers, writers, and accessors.\n"],["AnkiRecord::TimeHelper","","classes/AnkiRecord/TimeHelper.html","","<p>Helper module to calculate integer time values since the 1970 epoch.\n<p>Specifically, the time that has passed …\n"],["allowed_card_template_answer_format_field_names","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-allowed_card_template_answer_format_field_names","()","<p>Returns allowed field_name values in {{field_name}} in the answer format.\n"],["allowed_card_template_question_format_field_names","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-allowed_card_template_question_format_field_names","()","<p>Returns allowed field_name values in {{field_name}} in the question format.\n"],["answer_format=","AnkiRecord::CardTemplateAttributes","classes/AnkiRecord/CardTemplateAttributes.html#method-i-answer_format-3D","(format)","<p>Sets the answer format of the card template.\n<p>Raises an ArgumentError if the specified format attempts …\n"],["checksum","AnkiRecord::ChecksumHelper","classes/AnkiRecord/ChecksumHelper.html#method-i-checksum","(sfld)","<p>Returns the integer representation of the first 8 characters of the SHA-1 digest of the <code>sfld</code> argument …\n"],["deck","AnkiRecord::NoteTypeAttributes","classes/AnkiRecord/NoteTypeAttributes.html#method-i-deck","()","<p>The note type’s deck.\n"],["deck=","AnkiRecord::NoteTypeAttributes","classes/AnkiRecord/NoteTypeAttributes.html#method-i-deck-3D","(deck)","<p>Sets the note type’s deck object.\n"],["field_names_in_order","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-field_names_in_order","()","<p>Returns an array of the note type’s fields’ names ordered by field ordinal values.\n"],["find_card_template_by","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-find_card_template_by","(name:)","<p>Returns the note type object’s card template with name <code>name</code> or nil if it is not found\n"],["find_deck_by","AnkiRecord::Collection","classes/AnkiRecord/Collection.html#method-i-find_deck_by","(name: nil, id: nil)","<p>Returns the collection’s deck object found by either <code>name</code> or <code>id</code>, or nil if it is not found.\n"],["find_deck_options_group_by","AnkiRecord::Collection","classes/AnkiRecord/Collection.html#method-i-find_deck_options_group_by","(id:)","<p>Returns the collection’s deck options group object found by <code>id</code>, or nil if it is not found.\n"],["find_note_by","AnkiRecord::Collection","classes/AnkiRecord/Collection.html#method-i-find_note_by","(id:)","<p>Returns the collection’s note object found by <code>id</code>, or nil if it is not found.\n"],["find_note_type_by","AnkiRecord::Collection","classes/AnkiRecord/Collection.html#method-i-find_note_type_by","(name: nil, id: nil)","<p>Returns the collection’s note type object found by either <code>name</code> or <code>id</code>, or nil if it is not found. …\n"],["method_missing","AnkiRecord::Note","classes/AnkiRecord/Note.html#method-i-method_missing","(method_name, field_content = nil)","<p>Overrides BasicObject#method_missing and creates “ghost methods”.\n<p>The ghost methods are the …\n"],["milliseconds_since_epoch","AnkiRecord::TimeHelper","classes/AnkiRecord/TimeHelper.html#method-i-milliseconds_since_epoch","()","<p>Returns approximately the number of milliseconds since the 1970 epoch. A random amount of milliseconds …\n"],["new","AnkiRecord::AnkiPackage","classes/AnkiRecord/AnkiPackage.html#method-c-new","(name:, target_directory: Dir.pwd, data: nil, open_path: nil, &closure)","<p>Instantiates a new Anki package object.\n<p>See the README for usage details.\n"],["new","AnkiRecord::CardTemplate","classes/AnkiRecord/CardTemplate.html#method-c-new","(note_type:, name: nil, args: nil)","<p>Instantiates a new card template with name <code>name</code> for the note type <code>note_type</code>.\n"],["new","AnkiRecord::Deck","classes/AnkiRecord/Deck.html#method-c-new","(collection:, name: nil, args: nil)","<p>Instantiates a new Deck object belonging to <code>collection</code> with name <code>name</code>.\n"],["new","AnkiRecord::DeckOptionsGroup","classes/AnkiRecord/DeckOptionsGroup.html#method-c-new","(collection:, name: nil, args: nil)","<p>Instantiates a new deck options group belonging to <code>collection</code> with name <code>name</code>.\n"],["new","AnkiRecord::Note","classes/AnkiRecord/Note.html#method-c-new","(note_type: nil, deck: nil, collection: nil, data: nil)","<p>Instantiates a note of type <code>note_type</code> and belonging to deck <code>deck</code>.\n<p>If <code>note_type</code> and <code>deck</code> arguments are …\n"],["new","AnkiRecord::NoteField","classes/AnkiRecord/NoteField.html#method-c-new","(note_type:, name: nil, args: nil)","<p>Instantiates a new field for the note type <code>note_type</code> with name <code>name</code>.\n"],["new","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-c-new","(collection:, name: nil, args: nil)",""],["open","AnkiRecord::AnkiPackage","classes/AnkiRecord/AnkiPackage.html#method-c-open","(path:, target_directory: nil, &closure)","<p>Instantiates a new Anki package object seeded with data from the opened Anki package.\n<p>See the README for …\n"],["prepare","AnkiRecord::AnkiPackage","classes/AnkiRecord/AnkiPackage.html#method-i-prepare","(sql)","<p>Returns an SQLite3::Statement object representing the given SQL and coupled to the collection.anki21 …\n"],["question_format=","AnkiRecord::CardTemplateAttributes","classes/AnkiRecord/CardTemplateAttributes.html#method-i-question_format-3D","(format)","<p>Sets the question format of the card template.\n<p>Raises an ArgumentError if the specified format attempts …\n"],["respond_to_missing?","AnkiRecord::Note","classes/AnkiRecord/Note.html#method-i-respond_to_missing-3F","(method_name, *)","<p>This allows #respond_to? to be accurate for the ghost methods created by #method_missing.\n"],["save","AnkiRecord::Deck","classes/AnkiRecord/Deck.html#method-i-save","()","<p>Saves the deck (or updates it) in the collection.anki21 database.\n"],["save","AnkiRecord::Note","classes/AnkiRecord/Note.html#method-i-save","()","<p>Saves the note to the collection.anki21 database.\n<p>This also saves the note’s cards.\n"],["save","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-save","()","<p>Saves the note type to the collection.anki21 database\n"],["seconds_since_epoch","AnkiRecord::TimeHelper","classes/AnkiRecord/TimeHelper.html#method-i-seconds_since_epoch","()","<p>Returns approximately the number of seconds since the 1970 epoch.\n"],["sort_field_name","AnkiRecord::NoteType","classes/AnkiRecord/NoteType.html#method-i-sort_field_name","()","<p>Returns the name of the note type’s field used to sort notes in the browser.\n"],["temporarily_unzip_source_apkg","AnkiRecord::AnkiPackage","classes/AnkiRecord/AnkiPackage.html#method-i-temporarily_unzip_source_apkg","()","<p>Unzips the *.apkg file that was opened and yields its collection.anki21 database as a SQLite3::Database …\n"],["zip","AnkiRecord::AnkiPackage","classes/AnkiRecord/AnkiPackage.html#method-i-zip","()","<p>Zips the temporary files (collection.anki21, collection.anki2, and media) into a new *.apkg package file. …\n"],["CHANGELOG","","files/CHANGELOG_md.html","","<p>[Development started] - 02-02-2023\n<p>[0.1.1] - 02-24-2023\n<p>The initial version released.\n"],["CODE_OF_CONDUCT","","files/CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>We as members, contributors, and leaders pledge to make …\n"],["LICENSE","","files/LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2023 Kyle Rego\n<p>Permission is hereby granted, free of charge, to any …\n"],["README","","files/README_md.html","","<p>Anki Record\n<p>Anki Record is a Ruby library which provides a programmatic interface to Anki flashcard deck …\n"]]}}